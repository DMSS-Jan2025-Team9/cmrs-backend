name: SonarQube Analysis

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

jobs:
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: 
          - coursemanagement
          - courserecommendation
          - courseregistration
          - notificationservice
          # - usermanagement
        include:
          - service: coursemanagement 
            db_name: course_db
          - service: courserecommendation
            db_name: recommendation_db
          - service: courseregistration
            db_name: registration_db
          - service: notificationservice
            db_name: notification_db
          # - service: usermanagement
          #   db_name: user_management_db
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password123
          MYSQL_DATABASE: ${{ matrix.db_name }}
          # Initialize with privileges
          MYSQL_USER: sonaruser
          MYSQL_PASSWORD: sonarpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
          cache: 'maven'
      
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-${{ matrix.service }}
          restore-keys: ${{ runner.os }}-sonar-${{ matrix.service }}
      
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      # Initialize the database schema to avoid test failures
      - name: Initialize Database Schema
        run: |
          echo "Initializing database schema for ${{ matrix.service }}..."
          mysql -h 127.0.0.1 -P 3306 -u root -ppassword123 ${{ matrix.db_name }} -e "
          CREATE DATABASE IF NOT EXISTS ${{ matrix.db_name }} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
          GRANT ALL PRIVILEGES ON ${{ matrix.db_name }}.* TO 'sonaruser'@'%';
          FLUSH PRIVILEGES;
          "
      
      # SonarQube connection diagnostics
      - name: SonarQube Connection Diagnostics
        run: |
          echo "Running SonarQube connection diagnostics..."
          
          # Check if SONAR_HOST_URL is set
          if [ -z "${{ secrets.SONAR_HOST_URL }}" ]; then
            echo "::error::SONAR_HOST_URL secret is not set!"
            exit 1
          else
            echo "SONAR_HOST_URL is set to: ${{ secrets.SONAR_HOST_URL }}"
          fi
          
          # Check if SONAR_TOKEN is set (without revealing it)
          if [ -z "${{ secrets.SONAR_TOKEN }}" ]; then
            echo "::error::SONAR_TOKEN secret is not set!"
            exit 1
          else
            echo "SONAR_TOKEN is set (value not shown for security)"
          fi
          
          # Try to reach the SonarQube server
          echo "Testing connection to SonarQube server..."
          
          # Using curl to test connectivity
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "${{ secrets.SONAR_HOST_URL }}/api/system/status")
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "âœ… Successfully connected to SonarQube server!"
          else
            echo "::warning::Could not connect to SonarQube server, status code: $HTTP_CODE"
            
            # Additional diagnostics
            echo "Running network diagnostics..."
            
            # Extract hostname from URL
            SONAR_HOST=$(echo "${{ secrets.SONAR_HOST_URL }}" | sed -E 's|^https?://([^:/]+).*|\1|')
            
            # Try to ping the host
            echo "Attempting to ping $SONAR_HOST..."
            ping -c 3 $SONAR_HOST
            
            # Try traceroute
            echo "Traceroute to $SONAR_HOST..."
            traceroute $SONAR_HOST
            
            # Check if we can at least reach the server (even if authentication fails)
            echo "Checking if server is reachable (without authentication)..."
            curl -v "${{ secrets.SONAR_HOST_URL }}/api/system/status"
          fi
          
          # Check for common issues in URL format
          if [[ "${{ secrets.SONAR_HOST_URL }}" == *"localhost"* ]] || [[ "${{ secrets.SONAR_HOST_URL }}" == *"127.0.0.1"* ]]; then
            echo "::error::SONAR_HOST_URL contains 'localhost' or '127.0.0.1'! GitHub Actions cannot access your local machine."
            echo "You must use a publicly accessible URL for your SonarQube server."
          fi
      
      # Split build and SonarQube analysis to isolate potential issues
      - name: Build and Run Tests
        working-directory: ./${{ matrix.service }}
        env:
          DB_NAME: ${{ matrix.db_name }}
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/${{ matrix.db_name }}?createDatabaseIfNotExist=true
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: password123
          # Set Hibernate to create-drop for test execution
          SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
          SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.MySQLDialect
          # Add debugging for Hibernate
          SPRING_JPA_PROPERTIES_HIBERNATE_SHOW_SQL: true
          SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: true
        run: |
          # Run the build and tests first, without SonarQube
          mvn -B clean verify
      
      - name: Check SonarQube Connection
        id: sonar-check
        continue-on-error: true
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          # Simple check if SonarQube server is reachable
          if curl -s -f -o /dev/null $SONAR_HOST_URL/api/system/status; then
            echo "SonarQube server is reachable at $SONAR_HOST_URL"
            echo "sonar_reachable=true" >> $GITHUB_OUTPUT
          else
            echo "::warning::Unable to reach SonarQube server at $SONAR_HOST_URL"
            echo "sonar_reachable=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Run SonarQube Analysis
        working-directory: ./${{ matrix.service }}
        if: steps.sonar-check.outputs.sonar_reachable == 'true'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          # Run the SonarQube analysis with detailed test reports
          mvn -B org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Dsonar.projectKey=${{ matrix.service }} \
          -Dsonar.projectName='${{ matrix.service }}' \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
          -Dsonar.tests=src/test \
          -Dsonar.test.inclusions=**/*Test.java \
          -Dsonar.java.coveragePlugin=jacoco \
          -Dsonar.verbose=true
      
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        if: success() || failure()  # Upload artifacts even if tests fail
        with:
          name: ${{ matrix.service }}-artifact
          path: |
            ${{ matrix.service }}/target/*.jar
            ${{ matrix.service }}/target/site/jacoco/
            ${{ matrix.service }}/target/surefire-reports/
      
      - name: Upload Test Reports
        uses: actions/upload-artifact@v4
        if: failure()  # Only upload detailed reports on failure
        with:
          name: ${{ matrix.service }}-test-reports
          path: |
            ${{ matrix.service }}/target/surefire-reports/
            ${{ matrix.service }}/target/failsafe-reports/