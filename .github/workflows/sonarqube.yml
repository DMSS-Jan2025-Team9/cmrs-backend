name: SonarQube Analysis

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

jobs:
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: 
          - coursemanagement
          - courserecommendation
          - courseregistration
          - notificationservice
          #- usermanagement
        include:
          - service: coursemanagement 
            db_name: course_db
          - service: courserecommendation
            db_name: recommendation_db
          - service: courseregistration
            db_name: registration_db
          - service: notificationservice
            db_name: notification_db
          #- service: usermanagement
          #  db_name: user_management_db
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password123
          MYSQL_DATABASE: ${{ matrix.db_name }}
          MYSQL_USER: sonaruser
          MYSQL_PASSWORD: sonarpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
          cache: 'maven'
      
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-${{ matrix.service }}
          restore-keys: ${{ runner.os }}-sonar-${{ matrix.service }}
      
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Test SonarQube Connection
        run: |
          echo "Testing connection to SonarQube server via ngrok..."
          curl -v "https://c596-2406-3003-2003-4622-84db-879f-461-8dee.ngrok-free.app/api/system/status" --connect-timeout 10
      
      - name: Initialize Database Schema
        run: |
          echo "Initializing database schema for ${{ matrix.service }}..."
          mysql -h 127.0.0.1 -P 3306 -u root -ppassword123 ${{ matrix.db_name }} -e "
          CREATE DATABASE IF NOT EXISTS ${{ matrix.db_name }} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
          GRANT ALL PRIVILEGES ON ${{ matrix.db_name }}.* TO 'sonaruser'@'%';
          FLUSH PRIVILEGES;
          "
      
      - name: Build and Run Tests
        working-directory: ./${{ matrix.service }}
        env:
          DB_NAME: ${{ matrix.db_name }}
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/${{ matrix.db_name }}?createDatabaseIfNotExist=true
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: password123
          SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
          SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.MySQLDialect
          SPRING_JPA_PROPERTIES_HIBERNATE_SHOW_SQL: true
          SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: true
        run: |
          # Run the build and tests first, without SonarQube
          mvn -B clean verify
      
      - name: Run SonarQube Analysis
        working-directory: ./${{ matrix.service }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          # Run the SonarQube analysis with detailed test reports
          mvn -B org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Dsonar.host.url= https://c596-2406-3003-2003-4622-84db-879f-461-8dee.ngrok-free.app/ \
          -Dsonar.projectKey=${{ matrix.service }} \
          -Dsonar.projectName='${{ matrix.service }}' \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
          -Dsonar.tests=src/test \
          -Dsonar.test.inclusions=**/*Test.java \
          -Dsonar.java.coveragePlugin=jacoco \
          -Dsonar.verbose=true