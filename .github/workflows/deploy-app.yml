# This GitHub Actions workflow automates the continuous deployment of microservices to Amazon ECS. 
# It supports selective deployment by :
# 1) detecting changes in deploy-app.yml and deploy the services, or
# 2) individual microservice folders and only deploying the affected services

name: Deploy Changed Microservices to Amazon ECS

on:
  push:
    branches:
      - feature/devsecops
    paths:
      - 'usermanagement/**'
      - 'coursemanagement/**'
      - 'courseregistration/**'
      - 'notificationservice/**'
      - 'courserecommendation/**'
      - '.github/workflows/deploy-app.yml'
      - '.aws/**'

env:
  AWS_REGION: ap-southeast-1                    # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ecr-cmrs                      # set this to your Amazon ECR repository name
  ECS_CLUSTER: cmrs-ecs-cluster                 # set this to your Amazon ECS cluster name

jobs:
  detect-changes:
    runs-on: self-hosted # use self hosted runner
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4 
        with:
          fetch-depth: 0

      - name: Fetch origin main
        run: git fetch origin main

      - name: Get changed folders
        id: set-matrix
        run: |
          # Get list of changed files compared to stable release branch
          CHANGED=$(git diff --name-only origin/main...HEAD)
          echo "Changed files:"
          echo "$CHANGED"

          # Define service config
          SERVICES='[
            {"name":"user-management", "path":"usermanagement", "task-def":".aws/user-management-task.json", "container-name":"user-management", "ecs-service":"user-management", "ecr":"ecr-cmrs-user-management"},
            {"name":"course-management", "path":"coursemanagement", "task-def":".aws/course-management-task.json", "container-name":"course-management", "ecs-service":"course-management", "ecr":"ecr-cmrs-course-management"},
            {"name":"course-registration", "path":"courseregistration", "task-def":".aws/course-registration-task.json", "container-name":"course-registration", "ecs-service":"course-registration", "ecr":"ecr-cmrs-course-registration"},
            {"name":"notification", "path":"notificationservice", "task-def":".aws/notification-task.json", "container-name":"notification", "ecs-service":"notification", "ecr":"ecr-cmrs-notification"},
            {"name":"course-recommendation", "path":"courserecommendation", "task-def":".aws/course-recommendation-task.json", "container-name":"course-recommendation", "ecs-service":"course-recommendation", "ecr":"ecr-cmrs-course-recommendation"}
          ]'

          # If deploy-app.yml changed, deploy all services
          if echo "$CHANGED" | grep -q ".github/workflows/deploy-app.yml"; then
            echo "Workflow file changed. Triggering all services."
            echo "matrix=$(echo "$SERVICES" | jq -c)" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Get top-level folders that changed
          FOLDERS=$(echo "$CHANGED" | awk -F/ '{print $1}' | sort -u | jq -R . | jq -s .)
          echo "Changed folders: $FOLDERS"

          # Build matrix of affected services
          FILTERED=$(echo "$SERVICES" | jq --argjson changed "$FOLDERS" '[.[] | select($changed | index(.path))]')
          echo "matrix=$(echo "$FILTERED" | jq -c)" >> "$GITHUB_OUTPUT"

  deploy:
    name: Deploy Services
    needs: detect-changes
    runs-on: self-hosted
    environment: dev
    timeout-minutes: 10
    
    if: ${{ fromJson(needs.detect-changes.outputs.matrix) != '[]' }}
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Generate a timestamp for the image tag
          TIMESTAMP=$(date -u +"%Y%m%d_%H%M%S")
          #IMAGE_URI=$ECR_REGISTRY/${{ matrix.service.ecr }}:$TIMESTAMP
          
          # IAC deployed image - v1.0.0
          IMAGE_URI=$ECR_REGISTRY/${{ matrix.service.ecr }}:v1.0.0
          echo "Building image: $IMAGE_URI"

          # Build the Docker image and push it to ECR
          docker build -t $IMAGE_URI ${{ matrix.service.path }}
          docker push $IMAGE_URI

          # Save the image URI for use in later steps
          echo "image=$IMAGE_URI" >> "$GITHUB_OUTPUT"

      - name: Set tag for ECR tasks
        id: set-tag
        env:
          proj: cmrs
          ecs-env: dev
          ecs-service-name: ${{ matrix.service.ecs-service }}
          version: ${{ steps.build-image.outputs.image }}
        run: |
          # Save the tags JSON manually for later use
          TAGS_JSON=$(printf '[{"key": "Environment", "value": "%s"}, {"key": "Project", "value": "%s"}, {"key": "Service", "value": "%s"}, {"key": "Version", "value": "%s"}]' \
            "$ecs-env" "$proj" "$ecs-service-name" "$version")
          
          echo "tags=$TAGS_JSON" >> "$GITHUB_OUTPUT"

      - name: Render new task definition
        id: render-task
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ matrix.service.task-def }}
          container-name: ${{ matrix.service.container-name }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task.outputs.task-definition }}
          service: ${{ matrix.service.ecs-service }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          enable-ecs-managed-tags: true
          wait-for-task-stopped: true
          run-task-tags: ${{ steps.set-tag.outputs.tags }}
