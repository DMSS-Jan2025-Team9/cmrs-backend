name: Deploy All Microservices to Amazon ECS

on:
  push:
    branches:
      - feature/devsecops

env:
  AWS_REGION: ap-southeast-1                    # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ecr-cmrs                  # set this to your Amazon ECR repository name
  ECS_CLUSTER: cmrs-ecs-cluster                 # set this to your Amazon ECS cluster name
 
 
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: dev
    timeout-minutes: 30
    
    strategy:
      matrix:
        service:
          - name: user-management
            path: usermanagement # source code path to build the Dockerfile
            task-def: .aws/user-management-task.json
            container-name: user-management
            ecs-service: user-management
            ecr: ecr-cmrs-user-management

          - name: course-management
            path: coursemanagement # source code path to build the Dockerfile
            task-def: .aws/course-management-task.json
            container-name: course-management
            ecs-service: course-management
            ecr: ecr-cmrs-course-management
            
          - name: course-registration
            path: courseregistration # source code path to build the Dockerfile
            task-def: .aws/course-registration-task.json
            container-name: course-registration
            ecs-service: course-registration
            ecr: ecr-cmrs-course-registration
            
          - name: notification
            path: notificationservice # source code path to build the Dockerfile
            task-def: .aws/notification-task.json
            container-name: notification
            ecs-service: notification
            ecr: ecr-cmrs-notification
            
          - name: course-recommendation
            path: courserecommendation # source code path to build the Dockerfile
            task-def: .aws/course-recommendation-task.json
            container-name: course-recommendation
            ecs-service: course-recommendation
            ecr: ecr-cmrs-course-recommendation

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Generate a timestamp for the image tag
          TIMESTAMP=$(date -u +"%Y%m%d_%H%M%S")
          IMAGE_URI=$ECR_REGISTRY/${{ matrix.service.ecr }}:$TIMESTAMP
          echo "Building image: $IMAGE_URI"

          # Build the Docker image and push it to ECR
          docker build -t $IMAGE_URI ${{ matrix.service.path }}
          docker push $IMAGE_URI

          # Save the image URI for use in later steps
          echo "image=$IMAGE_URI" >> "$GITHUB_OUTPUT"

      - name: Render new task definition
        id: render-task
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ matrix.service.task-def }}
          container-name: ${{ matrix.service.container-name }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task.outputs.task-definition }}
          service: ${{ matrix.service.ecs-service }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
